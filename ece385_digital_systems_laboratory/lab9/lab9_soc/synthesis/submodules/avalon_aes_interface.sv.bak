/************************************************************************
Avalon-MM Interface for AES Decryption IP Core

Dong Kai Wang, Fall 2017

For use with ECE 385 Experiment 9
University of Illinois ECE Department

Register Map:

 0-3 : 4x 32bit AES Key
 4-7 : 4x 32bit AES Encrypted Message
 8-11: 4x 32bit AES Decrypted Message
   12: Not Used
	13: Not Used
   14: 32bit Start Register
   15: 32bit Done Register

************************************************************************/

module avalon_aes_interface (
	// Avalon Clock Input
	input logic CLK,
	
	// Avalon Reset Input
	input logic RESET,
	
	// Avalon-MM Slave Signals
	input  logic AVL_READ,					// Avalon-MM Read
	input  logic AVL_WRITE,					// Avalon-MM Write
	input  logic AVL_CS,						// Avalon-MM Chip Select
	input  logic [3:0] AVL_BYTE_EN,		// Avalon-MM Byte Enable
	input  logic [3:0] AVL_ADDR,			// Avalon-MM Address
	input  logic [31:0] AVL_WRITEDATA,	// Avalon-MM Write Data
	output logic [31:0] AVL_READDATA,	// Avalon-MM Read Data
	
	// Exported Conduit
	output logic [31:0] EXPORT_DATA		// Exported Conduit Signal to LEDs
);



//assign EXPORT_DATA = 32'd27;

logic[31:0] rg[15:0];
logic[31:0] temp;
logic[127:0] result;

assign EXPORT_DATA={rg[0][31:16], rg[3][15:0]};
assign AVL_READDATA=(AVL_READ && AVL_CS) ? rg[AVL_ADDR]:32'b0;

AES aes(.CLK(CLK), .RESET(RESET), .AES_START(rg[14][0]), .AES_DONE(rg[15][0]), 
	     .AES_KEY({rg[0], rg[1], rg[2], rg[3]}), 
		  .AES_MSG_ENC({rg[4], rg[5], rg[6], rg[7]}), 
		  .AES_MSG_DEC(result) );
//{rg[8], rg[9], rg[10], rg[11]}

always_comb
begin
	if(AVL_WRITE ==1'b1 & AVL_CS==1'b1)
		if(AVL_BYTE_EN[3]==1'b1)
			temp[31:24]=AVL_WRITEDATA[31:24];
		if(AVL_BYTE_EN[2]==1'b1)
			temp[23:16]=AVL_WRITEDATA[23:16];
		if(AVL_BYTE_EN[1]==1'b1)
			temp[15:8]=AVL_WRITEDATA[15:8];
		if(AVL_BYTE_EN[0]==1'b1)
			temp[7:0]=AVL_WRITEDATA[7:0];
end

always_ff @(posedge CLK or posedge RESET)
	begin
		if(RESET==1'b1)
			begin
			rg[0]<=32'h0;
			rg[1]<=32'h0;
			rg[2]<=32'h0;
			rg[3]<=32'h0;
			rg[4]<=32'h0;
			rg[5]<=32'h0;
			rg[6]<=32'h0;
			rg[7]<=32'h0;
			rg[8]<=32'h0;
			rg[9]<=32'h0;
			rg[10]<=32'h0;
			rg[11]<=32'h0;
			rg[12]<=32'h0;
			rg[13]<=32'h0;
			rg[14]<=32'h0;
			rg[15]<=32'h0;
			end
		else if(AVL_CS==1'b1 && AVL_WRITE==1'b1)
			if(AVL_ADDR<8 | AVL_ADDR>11)
				rg[AVL_ADDR]<=temp;
			else
				if(AVL_ADDR==4'b1000)
					rg[AVL_ADDR]<=result[31:0];
				else if(AVL_ADDR==4'b1001)
					rg[AVL_ADDR]<=result[63:32];
				else if(AVL_ADDR==4'b1010)
					rg[AVL_ADDR]<=result[95:64];
				else if(AVL_ADDR==4'b1011)
					rg[AVL_ADDR]<=result[127:96];
				else
					rg[AVL_ADDR]<=rg[AVL_ADDR];
		else 
			temp<=temp;
	end

endmodule

